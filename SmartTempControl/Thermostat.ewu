$version 13.04

// Device Class
note group GlobalsNote
{
  attr Bounds = <-70,279,170,439>;
}

// Constants
note group ConstantsNote
{
  attr Bounds = <-70,110,170,279>;
}

// Resources
note group Note
{
  attr Bounds = <530,-80,1010,440>;
}

$rect <210,150,450,190>
$output false
autoobject WidgetSet::ToggleButtonConfig SwingSwitchConfig
{
  preset FaceOnFrameActive = 3;
  preset FaceOnFrameFocused = 1;
  preset FaceOnFrameDisabled = 1;
  preset FaceOnFrameDefault = 1;
  preset FaceOnBitmapActive = Thermostat::SwingSwitch;
  preset FaceOnBitmapFocused = Thermostat::SwingSwitch;
  preset FaceOnBitmapDisabled = Thermostat::SwingSwitch;
  preset FaceOnBitmapDefault = Thermostat::SwingSwitch;
  preset FaceOffFrameActive = 2;
  preset FaceOffFrameFocused = 0;
  preset FaceOffFrameDisabled = 0;
  preset FaceOffFrameDefault = 0;
  preset FaceOffBitmapActive = Thermostat::SwingSwitch;
  preset FaceOffBitmapFocused = Thermostat::SwingSwitch;
  preset FaceOffBitmapDisabled = Thermostat::SwingSwitch;
  preset FaceOffBitmapDefault = Thermostat::SwingSwitch;
  preset WidgetMaxSize = <75,44>;
  preset WidgetMinSize = <75,44>;
}

$rect <560,151,760,191>
$output false
resource Resources::Bitmap SwingSwitch
{
  attr bitmapfile FileName = .\Res\SwingSwitch.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize = <75,44>;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Alpha8;
  attr bitmapmode Mode = Default;
}

$rect <560,191,760,231>
$output false
resource Resources::Bitmap ButtonDay
{
  attr bitmapfile FileName = .\Res\ButtonDay.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize = <44,44>;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Alpha8;
  attr bitmapmode Mode = Default;
}

$rect <560,231,760,271>
$output false
resource Resources::Bitmap ButtonNight
{
  attr bitmapfile FileName = .\Res\ButtonNight.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize = <44,44>;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Alpha8;
  attr bitmapmode Mode = Default;
}

$rect <769,151,969,191>
$output false
resource Resources::Bitmap ButtonVacation
{
  attr bitmapfile FileName = .\Res\ButtonVacation.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize = <44,44>;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Alpha8;
  attr bitmapmode Mode = Default;
}

$rect <210,230,450,270>
$output false
autoobject WidgetSet::RadioButtonConfig RadioButtonDayConfig
{
  preset LabelOnColorActive = #FFFFFFFF;
  preset LabelOnColorFocused = #FFFFFFFF;
  preset LabelOnColorDefault = Thermostat::Hot;
  preset LabelOffColorActive = #FFFFFFFF;
  preset LabelOffColorFocused = #FFFFFFFF;
  preset LabelOffColorDefault = Thermostat::Hot;
  preset LabelMarginLeft = 50;
  preset LabelAlignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
  preset LabelOnFont = Thermostat::FontL;
  preset LabelOffFont = Thermostat::FontL;
  preset FaceLayout = Core::Layout[AlignToBottom, AlignToLeft, AlignToTop];
  preset FaceOnFrameActive = 1;
  preset FaceOnFrameFocused = 1;
  preset FaceOnFrameDisabled = 1;
  preset FaceOnFrameDefault = 1;
  preset FaceOnBitmapActive = Thermostat::ButtonDay;
  preset FaceOnBitmapFocused = Thermostat::ButtonDay;
  preset FaceOnBitmapDisabled = Thermostat::ButtonDay;
  preset FaceOnBitmapDefault = Thermostat::ButtonDay;
  preset FaceOffFrameActive = 0;
  preset FaceOffFrameFocused = 0;
  preset FaceOffFrameDisabled = 0;
  preset FaceOffFrameDefault = 0;
  preset FaceOffBitmapActive = Thermostat::ButtonDay;
  preset FaceOffBitmapFocused = Thermostat::ButtonDay;
  preset FaceOffBitmapDisabled = Thermostat::ButtonDay;
  preset FaceOffBitmapDefault = Thermostat::ButtonDay;
  preset WidgetMaxSize = <440,44>;
  preset WidgetMinSize = <44,44>;
}

$rect <210,270,450,310>
$output false
autoobject WidgetSet::RadioButtonConfig RadioButtonNightConfig
{
  preset LabelOnColorActive = #FFFFFFFF;
  preset LabelOnColorFocused = #FFFFFFFF;
  preset LabelOnColorDefault = Thermostat::Cold;
  preset LabelOffColorActive = #FFFFFFFF;
  preset LabelOffColorFocused = #FFFFFFFF;
  preset LabelOffColorDefault = Thermostat::Cold;
  preset LabelMarginLeft = 50;
  preset LabelAlignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
  preset LabelOnFont = Thermostat::FontL;
  preset LabelOffFont = Thermostat::FontL;
  preset FaceLayout = Core::Layout[AlignToBottom, AlignToLeft, AlignToTop];
  preset FaceOnFrameActive = 1;
  preset FaceOnFrameFocused = 1;
  preset FaceOnFrameDisabled = 1;
  preset FaceOnFrameDefault = 1;
  preset FaceOnBitmapActive = Thermostat::ButtonNight;
  preset FaceOnBitmapFocused = Thermostat::ButtonNight;
  preset FaceOnBitmapDisabled = Thermostat::ButtonNight;
  preset FaceOnBitmapDefault = Thermostat::ButtonNight;
  preset FaceOffFrameActive = 0;
  preset FaceOffFrameFocused = 0;
  preset FaceOffFrameDisabled = 0;
  preset FaceOffFrameDefault = 0;
  preset FaceOffBitmapActive = Thermostat::ButtonNight;
  preset FaceOffBitmapFocused = Thermostat::ButtonNight;
  preset FaceOffBitmapDisabled = Thermostat::ButtonNight;
  preset FaceOffBitmapDefault = Thermostat::ButtonNight;
  preset WidgetMaxSize = <440,44>;
  preset WidgetMinSize = <44,44>;
}

$rect <210,310,450,350>
$output false
autoobject WidgetSet::RadioButtonConfig RadioButtonVacationConfig
{
  preset LabelOnColorActive = #FFFFFFFF;
  preset LabelOnColorFocused = #FFFFFFFF;
  preset LabelOnColorDefault = Thermostat::Vac;
  preset LabelOffColorActive = #FFFFFFFF;
  preset LabelOffColorFocused = #FFFFFFFF;
  preset LabelOffColorDefault = Thermostat::Vac;
  preset LabelMarginLeft = 50;
  preset LabelAlignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
  preset LabelOnFont = Thermostat::FontL;
  preset LabelOffFont = Thermostat::FontL;
  preset FaceLayout = Core::Layout[AlignToBottom, AlignToLeft, AlignToTop];
  preset FaceOnFrameActive = 1;
  preset FaceOnFrameFocused = 1;
  preset FaceOnFrameDisabled = 1;
  preset FaceOnFrameDefault = 1;
  preset FaceOnBitmapActive = Thermostat::ButtonVacation;
  preset FaceOnBitmapFocused = Thermostat::ButtonVacation;
  preset FaceOnBitmapDisabled = Thermostat::ButtonVacation;
  preset FaceOnBitmapDefault = Thermostat::ButtonVacation;
  preset FaceOffFrameActive = 0;
  preset FaceOffFrameFocused = 0;
  preset FaceOffFrameDisabled = 0;
  preset FaceOffFrameDefault = 0;
  preset FaceOffBitmapActive = Thermostat::ButtonVacation;
  preset FaceOffBitmapFocused = Thermostat::ButtonVacation;
  preset FaceOffBitmapDisabled = Thermostat::ButtonVacation;
  preset FaceOffBitmapDefault = Thermostat::ButtonVacation;
  preset WidgetMaxSize = <440,44>;
  preset WidgetMinSize = <44,44>;
}

// Font resources used for the different widgets. If you want to change the fonts \
// within your project, just create a variant of these font resources and define \
// the attributes of the font resources according your design ideas.
$rect <1079,100,1279,140>
$output false
resource Resources::Font FontL
{
  attr fontname FontName = Roboto Light;
  attr fontheight Height = 36;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontheightmode HeightMode = Compatible;
  attr fontrowdistance RowDistance;
}

$rect <210,190,450,230>
$output false
autoobject WidgetSet::VerticalSliderConfig VerticalSliderConfig
{
  preset TrackAboveFrameActive = 0;
  preset TrackAboveFrameFocused = 0;
  preset TrackAboveFrameDisabled = 0;
  preset TrackAboveFrameDefault = 0;
  preset TrackAboveBitmapActive = Thermostat::VertBar;
  preset TrackAboveBitmapFocused = Thermostat::VertBar;
  preset TrackAboveBitmapDisabled = Thermostat::VertBar;
  preset TrackAboveBitmapDefault = Thermostat::VertBar;
  preset TrackBelowFrameActive = 1;
  preset TrackBelowFrameFocused = 1;
  preset TrackBelowFrameDisabled = 1;
  preset TrackBelowFrameDefault = 1;
  preset TrackBelowBitmapActive = Thermostat::VertBar;
  preset TrackBelowBitmapFocused = Thermostat::VertBar;
  preset TrackBelowBitmapDisabled = Thermostat::VertBar;
  preset TrackBelowBitmapDefault = Thermostat::VertBar;
  preset WidgetMaxSize = <40,320>;
  preset WidgetMinSize = <40,320>;
}

$rect <-50,330,150,370>
$output false
class DeviceClass : Templates::DeviceClass
{
  // The property 'ActualTemp' represents the current temperature value in 1/10 degrees. \
  // In a real system this value is measured and provided by the underlying system.
  $rect <220,60,420,100>
  property int32 ActualTemp = 155;

  // This method is intended to be called by the device to notify the GUI application \
  // about an alternation of the property 'ActualTemp'.
  $rect <20,60,220,100>
  $output true
  method void UpdateActualTemp( arg int32 aNewValue )
  {
    if ( aNewValue != pure ActualTemp )
    {
      pure ActualTemp = aNewValue;
      notifyobservers ^ActualTemp;
    }
  }

  // Interface
  note group Note1
  {
    attr Bounds = <10,10,640,280>;
  }

  // The property 'NominalTemp' represents the current temperature set value in 1/10 \
  // degrees. This value is set by the GUI application and forwarded to the underlying \
  // system.
  $rect <220,100,420,140>
  property int32 NominalTemp = 215;

  $rect <420,100,620,140>
  onset NominalTemp
  {
    if ( pure NominalTemp == value )
      return;

    pure NominalTemp = value;


    $if !$prototyper
      native ( value )
      {
        /*
           TO DO:

           You can call a function of your own device API or you simply
           modify a variable existing in your middleware to reflect the
           new value:

           YourDevice_SetSomeValue( value );

           or

           YourDevice_SomeVariable = value;
        */
      }
    $endif

    notifyobservers ^NominalTemp;
  }

  $rect <220,140,420,180>
  property int32 FanSpeed = 15;

  $rect <420,140,620,180>
  onset FanSpeed
  {
    if ( pure FanSpeed == value )
      return;

    pure FanSpeed = value;

    $if !$prototyper
      native ( value )
      {
        /*
           TO DO:

           You can call a function of your own device API or you simply
           modify a variable existing in your middleware to reflect the
           new value:

           YourDevice_SetSomeValue( value );

           or

           YourDevice_SomeVariable = value;
        */
      }
    $endif

    notifyobservers ^FanSpeed;
  }

  $rect <220,180,420,220>
  property bool SwingMode = false;

  $rect <420,180,620,220>
  onset SwingMode
  {
    if ( pure SwingMode == value )
      return;

    pure SwingMode = value;

    $if !$prototyper
      native ( value )
      {
        /*
           TO DO:

           You can call a function of your own device API or you simply
           modify a variable existing in your middleware to reflect the
           new value:

           YourDevice_SetSomeValue( value );

           or

           YourDevice_SomeVariable = value;
        */
      }
    $endif

    notifyobservers ^SwingMode;
  }

  $rect <20,340,220,380>
  slot ChangeActualTemp
  {
    var int32 temp = ActualTemp;

    if(SettingNo ==0)
      NominalTemp = 215;
    if(SettingNo ==1)
      NominalTemp = 190;
    if(SettingNo == 2)
      NominalTemp = 170;

    if(SwingMode==true){
        if(FanSpeed>30 && FanSpeed < 50)
          NominalTemp = NominalTemp-10;
        if(FanSpeed>50)
          NominalTemp = NominalTemp -20;
    }
    if ( temp < NominalTemp)
      temp = temp + 1;
    else if ( temp > NominalTemp )
      temp = temp - 1;

    UpdateActualTemp( temp );

  }

  $rect <220,340,420,380>
  object Core::Timer ChangeTempTimer
  {
    preset OnTrigger = ChangeActualTemp;
    preset Period = 350;
    preset Enabled = true;
  }

  // Temperature
  note group TemperatureNote
  {
    attr Bounds = <10,290,440,400>;
  }

  $rect <220,220,420,260>
  property int32 SettingNo = 0;

  $rect <420,220,620,260>
  onset SettingNo
  {
    if ( value > 3 )
      value = 3;
    if ( value < 0 )
      value = 0;


    if ( pure SettingNo == value )
      return;

    pure SettingNo = value;

    // For target code generation you will use your specific device API 
    // to change the affected value.
    $if !$prototyper
      native ( value )
      {
        /*
           TO DO:

           You can call a function of your own device API or you simply
           modify a variable existing in your middleware to reflect the
           new value:

           YourDevice_SetSomeValue( value );

           or

           YourDevice_SomeVariable = value;
        */
      }
    $endif

    notifyobservers ^SettingNo;
  }
}

$rect <-50,370,150,410>
autoobject Thermostat::DeviceClass Device;

$rect <560,-10,760,30>
$output false
resource Resources::Bitmap Wheels
{
  attr bitmapfile FileName = .\Res\Wheels.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize = <340,340>;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Alpha8;
  attr bitmapmode Mode = Default;
}

$rect <560,30,760,70>
$output false
resource Resources::Bitmap Controller
{
  attr bitmapfile FileName = .\Res\Controller.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Native;
  attr bitmapmode Mode = Default;
}

$rect <-40,-30,200,10>
$output false
class TemperatureController : Core::Group
{
  $rect <0,350,200,390>
  inherited property Bounds = <0,0,340,340>;

  $rect <0,430,200,470>
  inherited method UpdateLayout()
  {
    super( aSize );

    var int32 cX = aSize.x / 2;
    var int32 cY = aSize.y / 2;

    DeltaTempView.Bounds = rect( <0,0>, aSize );
    DeltaTempView.Offset = point( cX, cY );

  }

  $rect <0,390,200,430>
  inherited method UpdateViewState()
  {
    super( aState );

    var int32 alpha = 0;
    var int32 actual = pure ActualValue;
    var float actAngle = 0.0;
    var int32 nominal = pure NominalValue;
    var float nomAngle = 0.0;

    if ( actual < pure MinValue )
      actual = pure MinValue;
    if ( actual > pure MaxValue )
      actual = pure MaxValue;
    if ( nominal < pure MinValue )
      nominal = pure MinValue;
    if ( nominal > pure MaxValue )
      nominal = pure MaxValue;

    if ( pure MaxValue > pure MinValue)
    {
      actAngle = 135.0 - (float)( actual - pure MinValue ) * 270.0 / (float)( pure MaxValue - pure MinValue ); 
      nomAngle = 135.0 - (float)( nominal - pure MinValue ) * 270.0 / (float)( pure MaxValue - pure MinValue ); 
    }

    Needle.RotateAndScale( Foreground.Bounds.center, nomAngle, 1.0, 1.0 );

    var int32 inner = 92;
    var int32 outer = 102;

    if (( pure MaxValue > pure MinValue) && ( actual != nominal ))
    {
      DeltaTempPath.InitSubPath( 0, 84 );
      DeltaTempPath.Rotate( -actAngle -90.0 );
      DeltaTempPath.Begin( 0, inner, 0 );
      DeltaTempPath.AddLine( 0, outer, 0 );
      DeltaTempPath.AddArc( 0, 0, 0, outer, outer, 0, -nomAngle + actAngle, 80 );
      DeltaTempPath.Rotate( actAngle + 90.0 );
    }
    else
    {
      DeltaTempPath.InitSubPath( 0, 84 );
    }

    if ( actual < nominal )
    {
      Symbol.FrameNumber = 0;
      Symbol.Color = Thermostat::Hot;
      DeltaTempView.Color = Thermostat::Hot;
      alpha = ( nominal - actual ) * 10;
    }
    else if ( actual > nominal )
    {
      Symbol.FrameNumber = 1;
      Symbol.Color = Thermostat::Cold;
      DeltaTempView.Color = Thermostat::Cold;
      alpha = ( actual - nominal ) * 10;
    }
    if ( alpha > 255 )
      alpha = 255;
    Symbol.Opacity = alpha;

    ActualText.String = string( actual / 10 ) + "." + string( actual % 10 ) + "°C";
    NominalText.String = string( nominal / 10 ) + "." + string( nominal % 10 ) + "°C";

    alpha = ( actual - pure MinValue ) * 255 / ( pure MaxValue - pure MinValue );
    var color hot = Thermostat::Hot * alpha;
    var color cold = Thermostat::Cold * (uint8)( 255 - alpha );
    ActualText.Color = hot + cold;

  }

  // This is a rotate gesture handler.
  $rect <20,20,160,60>
  object Core::RotateTouchHandler RotateTouchHandler
  {
    preset Layout = Core::Layout[AlignToLeft, AlignToRight, AlignToTop];
    preset Bounds = <0,0,340,340>;
    preset OnRotate = onRotateSlot;
    preset OnEnd = onEndSlot;
    preset OnStart = onStartSlot;
  }

  $rect <20,20,160,60>
  object Views::Image Wheel
  {
    preset Bounds = <0,0,340,340>;
    preset Color = #000000FF;
    preset Bitmap = Thermostat::Wheels;
  }

  $rect <20,20,160,60>
  object Views::Image Foreground
  {
    preset Bounds = <10,10,330,330>;
    preset Bitmap = Thermostat::Controller;
  }

  $rect <20,20,160,60>
  object Views::WarpImage Needle
  {
    preset Point4 = <50,120>;
    preset Point3 = <150,120>;
    preset Point2 = <150,20>;
    preset Point1 = <50,20>;
    preset SourceAnchor = <15,132>;
    preset Color = Thermostat::Hot;
    preset Bitmap = Thermostat::Needle;
  }

  // The property 'NominalValue' represents the current temperature set value in \
  // 1/10 degrees. 
  $rect <400,130,600,170>
  property int32 NominalValue = 300;

  $rect <600,130,800,170>
  onset NominalValue
  {
    if ( pure NominalValue == value )
      return;

    pure NominalValue = value;

    InvalidateViewState();
  }

  // The property 'ActualValue' represents the current temperature value in 1/10 \
  // degrees.
  $rect <400,90,600,130>
  property int32 ActualValue = 150;

  $rect <600,90,800,130>
  onset ActualValue
  {
    if ( pure ActualValue == value )
      return;

    pure ActualValue = value;

    InvalidateViewState();
  }

  // This slot method will receive a signal, if the value of the property assigned \
  // to @Outlet has been changed by another widget or by the application logic. In \
  // response to this notification, the widget will update itself.
  $rect <870,130,1070,170>
  slot outletNominalSlot
  {
    if ( OutletNominal != null )
      NominalValue = OutletNominal^;
  }

  $rect <600,210,800,250>
  onset OutletNominal
  {
    if ( pure OutletNominal == value )
      return;

    if ( pure OutletNominal != null )
      detachobserver outletNominalSlot, pure OutletNominal;

    pure OutletNominal = value;

    if ( value != null )
      attachobserver outletNominalSlot, value;

    if ( value != null )
      postsignal outletNominalSlot;
  }

  // The property 'OutletNominal' provides an interface for the Model-View-Controller \
  // (MVC). In the MVC, the widgets (views) and the application logic (model) are \
  // always kept apart. An automatism behind this model ensures, that widgets are \
  // notified automatically as soon as the affected model has changed its state. \
  // On the other hand, user interactions on a widget cause the affected model to \
  // execute the application logic. Usually, a model is a simple Chora object containg \
  // several properties and the implementation of onget/onset method.
  // By assigning a property reference, Outlet establishes a connection between the \
  // widget and the model object, the affected property belongs to. After this, the \
  // widget is able to read and modify the referred property in response to the user \
  // interactions. It is also able to adapt the widget appearance, if the value of \
  // the referred property has been modified by another widget or by the application \
  // logic itself.
  $rect <400,210,600,250>
  property ^int32 OutletNominal = null;

  // This slot method will receive a signal, if the value of the property assigned \
  // to @Outlet has been changed by another widget or by the application logic. In \
  // response to this notification, the widget will update itself.
  $rect <870,90,1070,130>
  slot outletCurrentSlot
  {
    if ( OutletActual != null )
      ActualValue = OutletActual^;
  }

  $rect <600,170,800,210>
  onset OutletActual
  {
    if ( pure OutletActual == value )
      return;

    if ( pure OutletActual != null )
      detachobserver outletCurrentSlot, pure OutletActual;

    pure OutletActual = value;

    if ( value != null )
      attachobserver outletCurrentSlot, value;

    if ( value != null )
      postsignal outletCurrentSlot;
  }

  // The property 'OutletActual' provides an interface for the Model-View-Controller \
  // (MVC). In the MVC, the widgets (views) and the application logic (model) are \
  // always kept apart. An automatism behind this model ensures, that widgets are \
  // notified automatically as soon as the affected model has changed its state. \
  // On the other hand, user interactions on a widget cause the affected model to \
  // execute the application logic. Usually, a model is a simple Chora object containg \
  // several properties and the implementation of onget/onset method.
  // By assigning a property reference, Outlet establishes a connection between the \
  // widget and the model object, the affected property belongs to. After this, the \
  // widget is able to read and modify the referred property in response to the user \
  // interactions. It is also able to adapt the widget appearance, if the value of \
  // the referred property has been modified by another widget or by the application \
  // logic itself.
  $rect <400,170,600,210>
  property ^int32 OutletActual = null;

  // The property 'MaxValue' defines the maximum value of the temperature control \
  // in 1/10 degrees.
  $rect <400,50,600,90>
  property int32 MaxValue = 400;

  $rect <600,50,800,90>
  onset MaxValue
  {
    if ( pure MaxValue == value )
      return;

    pure MaxValue = value;

    InvalidateViewState();
  }

  // The property 'MinValue' defines the minimum value of the temperature control \
  // in 1/10 degrees.
  $rect <400,10,600,50>
  property int32 MinValue = 100;

  $rect <600,10,800,50>
  onset MinValue
  {
    if ( pure MinValue == value )
      return;

    pure MinValue = value;

    InvalidateViewState();
  }

  $rect <870,50,1070,90>
  slot onStartSlot
  {
    InvalidateViewState();
    startValue = NominalValue;


    NominalText.Opacity = 0xFF;
    ActualText.Opacity  = 0x00;
    FadeTextEffect.Enabled = false;


  }

  $rect <870,170,1070,210>
  slot onRotateSlot
  {
    var int32 temp = 0;
    var int32 delta = 0;

    if (( pure MaxValue > pure MinValue) && ( pure NominalValue >= pure MinValue) && ( pure NominalValue <= pure MaxValue))
    {
      delta = (int32)RotateTouchHandler.Relative * ( pure MaxValue - pure MinValue ) / 720;
    }

    temp = startValue - delta;
    if ( temp < pure MinValue )
      temp = pure MinValue;
    if ( temp > pure MaxValue )
      temp = pure MaxValue;

    if ( pure NominalValue != temp )
    {
      var int32 inx = Wheel.FrameNumber;

      if ( pure NominalValue - temp > 0 )
        inx = inx - 1;
      else
        inx = inx + 1;

      if ( inx < 0 )
        inx = 3;
      if ( inx > 3 )
        inx = 0;

      Wheel.FrameNumber = inx;
      NominalValue = temp;

      if (  OutletNominal != null )
        OutletNominal^ = NominalValue;

      notifyobservers OutletNominal;

    }

  }

  $rect <870,290,1070,330>
  slot onEndSlot
  {
    InvalidateViewState();

    FadeTextEffect.Enabled = true;

  }

  $rect <400,250,600,290>
  var int32 startValue;

  $rect <390,350,590,390>
  object Graphics::Path DeltaTempPath;

  $rect <20,20,160,60>
  object Views::StrokePath DeltaTempView
  {
    preset Bounds = <0,0,340,340>;
    preset Color = #0000FFFF;
    preset Width = 4;
    preset Path = DeltaTempPath;
  }

  $rect <20,20,160,60>
  object Views::Image Symbol
  {
    preset Bounds = <140,240,200,280>;
    preset Bitmap = Thermostat::SymbolHeadCool;
  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text ActualText
  {
    preset Layout = Core::Layout[AlignToBottom, AlignToRight, AlignToTop, ResizeHorz, ResizeVert];
    preset Bounds = <120,100,221,140>;
    preset Alignment = Views::TextAlignment[AlignHorzRight, AlignVertTop];
    preset String = "20.0°C";
    preset Font = Thermostat::FontL;
    preset Color = #000000FF;
  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text NominalText
  {
    preset Layout = Core::Layout[AlignToBottom, AlignToRight, AlignToTop, ResizeHorz, ResizeVert];
    preset Bounds = <120,100,221,140>;
    preset Alignment = Views::TextAlignment[AlignHorzRight, AlignVertTop];
    preset String = "20.0°C";
    preset Font = Thermostat::FontXXL;
    preset Color = #000000FF;
    preset Opacity = 0;
  }

  $rect <390,310,590,350>
  object Effects::Int32Effect FadeTextEffect
  {
    preset OnAnimate = fadeText;
    preset NoOfCycles = 1;
    preset CycleDuration = 500;
    preset InitialDelay = 1200;
  }

  $rect <870,10,1070,50>
  slot fadeText
  {
    sender;

    NominalText.Opacity = 0xFF - FadeTextEffect.Value;
    ActualText.Opacity  = FadeTextEffect.Value;

  }

  $rect <870,210,1070,250>
  slot incrNominal
  {
    sender;
    var int32 temp = NominalValue + 5;

    NominalText.Opacity = 0xFF;
    ActualText.Opacity  = 0x00;
    FadeTextEffect.Enabled = false;

    if ( temp > pure MaxValue )
      temp = pure MaxValue;

    NominalValue = temp;

    if (  OutletNominal != null )
      OutletNominal^ = NominalValue;

    notifyobservers OutletNominal;


    FadeTextEffect.Enabled = true;

  }

  $rect <870,250,1070,290>
  slot decrNominal
  {
    sender;
    var int32 temp = NominalValue - 5;

    NominalText.Opacity = 0xFF;
    ActualText.Opacity  = 0x00;
    FadeTextEffect.Enabled = false;

    if ( temp < pure MinValue )
      temp = pure MinValue;

    NominalValue = temp;

    if (  OutletNominal != null )
      OutletNominal^ = NominalValue;

    notifyobservers OutletNominal;

    FadeTextEffect.Enabled = true;

  }

  // This is a generic touch handler.
  $rect <20,20,160,60>
  object Core::SimpleTouchHandler SimpleTouchHandlerPlus
  {
    preset Point4 = <93,199>;
    preset Point3 = <157,199>;
    preset Point2 = <157,140>;
    preset Point1 = <93,140>;
    preset OnPress = incrNominal;
    preset MaxStrikeCount = 100;
  }

  // This is a generic touch handler.
  $rect <20,20,160,60>
  object Core::SimpleTouchHandler SimpleTouchHandlerMinus
  {
    preset Point4 = <191,187>;
    preset Point3 = <253,187>;
    preset Point2 = <253,147>;
    preset Point1 = <191,147>;
    preset OnPress = decrNominal;
    preset MaxStrikeCount = 100;
  }

  // Properties
  note group Note
  {
    attr Bounds = <380,-31,830,310>;
  }

  // Slot Methods
  note group Note1
  {
    attr Bounds = <840,-30,1139,360>;
  }

  $rect <590,310,790,350>
  $output true
  object Thermostat::DeviceClass Device;
}

$rect <560,70,760,110>
$output false
resource Resources::Bitmap Needle
{
  attr bitmapfile FileName = .\Res\Needle.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Alpha8;
  attr bitmapmode Mode = Default;
}

$rect <-50,150,150,190>
$output false
const color Cold = #1488D7FF;

$rect <-50,190,150,230>
$output false
const color Hot = #C70B6AFF;

$rect <560,110,760,150>
$output false
resource Resources::Bitmap SymbolHeadCool
{
  attr bitmapfile FileName = .\Res\SymbolHeadCool.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize = <36,36>;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Alpha8;
  attr bitmapmode Mode = Default;
}

// Font resources used for the different widgets. If you want to change the fonts \
// within your project, just create a variant of these font resources and define \
// the attributes of the font resources according your design ideas.
$rect <1079,60,1279,100>
$output false
resource Resources::Font FontXXL
{
  attr fontname FontName = Roboto Light;
  attr fontheight Height = 72;
  attr fontquality Quality = High;
  attr fontranges Ranges = '0'-'9','.','°','C';
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontheightmode HeightMode = Compatible;
  attr fontrowdistance RowDistance;
}

$rect <-40,-70,200,-30>
$output false
class Thermostat : Core::Group
{
  $rect <830,90,1030,130>
  inherited property Bounds = <0,0,800,480>;

  $rect <20,20,160,60>
  object Views::Wallpaper Background
  {
    preset Bounds = <0,0,800,480>;
    preset Bitmap = Thermostat::BackgroundDay;
  }

  $rect <20,20,160,60>
  object Views::Wallpaper Overlay
  {
    preset Bounds = <0,0,800,480>;
    preset Bitmap = Thermostat::BackgroundDay;
    preset Opacity = 0;
  }

  $rect <20,20,160,60>
  object WidgetSet::ToggleButton ToggleButton
  {
    preset Bounds = <443,207,518,251>;
    preset Outlet = ^Thermostat::Device.SwingMode;
    preset Label = "Caption";
    preset Appearance = Thermostat::SwingSwitchConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::RadioButton RadioDay
  {
    preset Bounds = <205,38,328,82>;
    preset Outlet = ^Thermostat::Device.SettingNo;
    preset Label = "Day";
    preset Appearance = Thermostat::RadioButtonDayConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::RadioButton RadioNight
  {
    preset Bounds = <347,38,478,82>;
    preset OutletSelector = 1;
    preset Outlet = ^Thermostat::Device.SettingNo;
    preset Label = "Night";
    preset Appearance = Thermostat::RadioButtonNightConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::RadioButton RadioVacation
  {
    preset Bounds = <518,38,713,82>;
    preset OutletSelector = 2;
    preset Outlet = ^Thermostat::Device.SettingNo;
    preset Label = "Vacation";
    preset Appearance = Thermostat::RadioButtonVacationConfig;
  }

  $rect <830,10,1030,50>
  var Thermostat::DeviceClass Device = Thermostat::Device;

  $rect <20,20,160,60>
  object Thermostat::TemperatureController TemperatureController
  {
    preset Bounds = <35,95,375,435>;
    preset OutletNominal = ^Thermostat::Device.NominalTemp;
    preset OutletActual = ^Thermostat::Device.ActualTemp;
  }

  $rect <20,20,160,60>
  object Views::Text OnOffButtonText
  {
    preset Bounds = <425,251,556,281>;
    preset String = "ENABLE FAN";
    preset Font = Thermostat::FontM;
  }

  $rect <1370,80,1570,120>
  slot changeBackFinished
  {
    sender;

    Background.Bitmap = Overlay.Bitmap;
    Overlay.Opacity = 0x00;

  }

  $rect <1060,60,1260,100>
  object Effects::Int32Effect FadeEffect
  {
    preset OnFinished = changeBackFinished;
    preset NoOfCycles = 1;
    preset Outlet = ^Overlay.Opacity;
  }

  $rect <830,50,1030,90>
  object Core::PropertyObserver SettingsObserver
  {
    preset OnEvent = onSettingChanged;
    preset Outlet = ^Thermostat::Device.SettingNo;
  }

  // This slot method is executed when the associated property observer 'PropertyObserver' \
  // is notified.
  $rect <1370,39,1570,79>
  slot onSettingChanged
  {
    Overlay.Opacity = 0x00;
    FadeEffect.Enabled = false;

    switch ( Device.SettingNo )
    {
      case 0: Overlay.Bitmap = Thermostat::BackgroundDay;
      case 1: Overlay.Bitmap = Thermostat::BackgroundNight;
      case 2:Overlay.Bitmap = Thermostat::BackgroundVacation;
      case 3: Overlay.Bitmap = Thermostat::BackgroundDay;
      default: Overlay.Bitmap = Thermostat::BackgroundDefault;
    }

    FadeEffect.Enabled = true;

  }

  $rect <20,20,160,60>
  object Thermostat::ExitScreen ExitScreen
  {
    preset Bounds = <0,0,800,480>;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object WidgetSet::RadioButton RadioPowerOff
  {
    preset Bounds = <735,16,779,60>;
    preset OutletSelector = 1;
    preset Outlet = null;
    preset Icon = null;
    preset Label = "";
    preset Appearance = Thermostat::RadioButtonPowerOff;
  }

  $rect <1370,199,1570,239>
  slot ExitScreenSlot
  {
    sender;
    ExitScreen.Opacity = 0x00;
    FadeEffectPowerOff.Enabled = false;


    Background.Visible=false;
    Overlay.Visible=false;
    ToggleButton.Visible=false;
    ToggleButton.Enabled=false;
    RadioDay.Visible=false;
    RadioDay.Enabled=false;
    RadioNight.Enabled=false;
    RadioNight.Visible=false;
    RadioVacation.Enabled=false;
    RadioVacation.Visible=false;
    TemperatureController.Visible=false;
    OnOffButtonText.Visible=false;
    Clock.Visible = false;
    Default.Visible = false;
    FilledRectangle.Visible=false;
    DefaultThermostat.Visible=false;
    RadioPowerOff.Visible=false;
    FanMode.Visible=false;
    Logo.Visible = false;
    RadioPowerOff.Enabled=false;
    Fan.Visible=false;
    FanText.Visible=false;

    ExitScreen.Visible = true;
    FadeEffectPowerOff.Enabled = true;


  }

  $rect <20,20,160,60>
  object Core::SimpleTouchHandler SimpleTouchHandler
  {
    preset Point4 = <708,3>;
    preset Point3 = <805,3>;
    preset Point2 = <805,95>;
    preset Point1 = <708,95>;
    preset OnPress = ExitScreenSlot;
  }

  $rect <1060,100,1260,140>
  object Effects::Int32Effect FadeEffectPowerOff
  {
    preset OnFinished = null;
    preset NoOfCycles = 1;
    preset CycleDuration = 1000;
    preset Outlet = ^ExitScreen.Opacity;
  }

  $rect <20,20,160,60>
  object Clock::Clock Clock
  {
    preset Bounds = <425,347,662,414>;
  }

  $rect <20,20,160,60>
  object Thermostat::DefaultThermostat DefaultThermostat
  {
    preset Bounds = <-3,0,797,480>;
  }

  $rect <20,20,160,60>
  object WidgetSet::RadioButton Default
  {
    preset Bounds = <-3,38,158,82>;
    preset OutletSelector = 3;
    preset Outlet = ^Thermostat::Device.SettingNo;
    preset OnRelease = null;
    preset OnPress = null;
    preset OnSelect = DefaultThermSlot;
    preset Label = "Manual";
    preset Appearance = Thermostat::RadioButtonDefaultConfig;
  }

  $rect <1371,119,1570,159>
  slot DefaultThermSlot
  {
    sender;
    DefaultThermostat.Opacity = 0x00;
    FadeEffectManual.Enabled = false;


    Thermostat::Device.SettingNo= 3;
    Background.Visible=false;
    Overlay.Visible=false;
    ToggleButton.Visible=false;
    ToggleButton.Enabled=false;
    RadioDay.Visible=false;
    RadioDay.Enabled=false;
    RadioNight.Enabled=false;
    RadioNight.Visible=false;
    RadioVacation.Enabled=false;
    RadioVacation.Visible=false;
    FilledRectangle.Visible=false;
    TemperatureController.Visible=false;
    TemperatureController.Enabled=false;
    OnOffButtonText.Visible=false;
    Clock.Visible = false;
    Default.Visible = false;
    Default.Enabled=false;

    DefaultThermostat.StackingPriority=1;
    DefaultThermostat.Visible = true;
    DefaultThermostat.Enabled=true;
    GoBackTouchHandler.Enabled=true;
    FadeEffectManual.Enabled = true;
    RadioPowerOff.Visible=true;
    RadioPowerOff.Enabled=true;
    Device.FanSpeed=15;
    Device.SwingMode=false;


  }

  $rect <20,20,160,60>
  object Core::SimpleTouchHandler GoBackTouchHandler
  {
    preset Point4 = <6,9>;
    preset Point3 = <106,9>;
    preset Point2 = <106,109>;
    preset Point1 = <6,109>;
    preset OnPress = GoBackSlot;
  }

  $rect <1371,160,1570,200>
  slot GoBackSlot
  {
    sender;
    TemperatureController.Opacity = 0x00;
    FadeEffectGoBack.Enabled = false;
    RectangleEffect.Enabled=false;

    DefaultThermostat.Visible = false;
    TemperatureController.Enabled=true;
    DefaultThermostat.Enabled=false;
    GoBackTouchHandler.Enabled=false;
    Background.Visible=true;
    Overlay.Visible=true;
    ToggleButton.Visible=true;
    ToggleButton.Enabled=true;
    RadioDay.Visible=true;
    RadioDay.Enabled=true;
    RadioNight.Enabled=true;
    RadioNight.Visible=true;
    FilledRectangle.Visible=false;
    RadioVacation.Enabled=true;
    RadioVacation.Visible=true;
    TemperatureController.Visible=true;
    OnOffButtonText.Visible=true;
    RadioPowerOff.Enabled=true;
    FilledRectangle.Visible=true;
    RadioPowerOff.Visible=true;
    Clock.Visible =true;
    Default.Visible =true;
    Default.Enabled=true;
    Default.Selected = false;

    RadioDay.Selected=true;
    Device.SettingNo=0;

    FadeEffectGoBack.Enabled = true;
    RectangleEffect.Enabled=true;
  }

  $rect <20,20,160,60>
  object Views::Rectangle FilledBackground
  {
    preset Bounds = <-3,0,799,480>;
  }

  $rect <20,20,160,60>
  object Thermostat::Logo Logo
  {
    preset Bounds = <700,380,800,480>;
    preset Opacity = 255;
  }

  $rect <20,20,160,60>
  object Views::Rectangle FilledRectangle
  {
    preset Bounds = <130,240,285,290>;
    preset Color = #000000FF;
    preset AlphaBlended = true;
    preset Visible = true;
  }

  $rect <1060,140,1260,180>
  object Effects::Int32Effect FadeEffectManual
  {
    preset NoOfCycles = 1;
    preset Outlet = ^DefaultThermostat.Opacity;
  }

  $rect <1060,180,1260,220>
  object Effects::Int32Effect FadeEffectGoBack
  {
    preset NoOfCycles = 1;
    preset Outlet = ^TemperatureController.Opacity;
  }

  $rect <20,20,160,60>
  object Thermostat::FanMode FanMode
  {
    preset Bounds = <-3,0,797,480>;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Core::SimpleTouchHandler SimpleTouchHandlerFanMode
  {
    preset Point4 = <3,16>;
    preset Point3 = <91,16>;
    preset Point2 = <91,89>;
    preset Point1 = <6,89>;
    preset OnPress = SlotGoBackFanMode;
  }

  $rect <20,20,160,60>
  object Views::Image Fan
  {
    preset Bounds = <647,192,708,251>;
    preset Bitmap = Thermostat::SymbolFanBig;
  }

  $rect <20,20,160,60>
  object Views::Text FanText
  {
    preset Bounds = <627,250,727,280>;
    preset String = "FAN ";
    preset Font = Thermostat::FontM;
  }

  $rect <20,20,160,60>
  object Core::SimpleTouchHandler FanTouchHandler
  {
    preset Point4 = <627,181>;
    preset Point3 = <727,181>;
    preset Point2 = <727,281>;
    preset Point1 = <627,281>;
    preset OnPress = SlotFan;
  }

  $rect <1370,240,1570,280>
  slot SlotFan
  {
    sender;
    FanMode.Opacity = 0x00;
    FadeEffectFanMode.Enabled = false;

    Background.Visible=false;
    Overlay.Visible=false;
    ToggleButton.Visible=false;
    ToggleButton.Enabled=false;
    RadioDay.Visible=false;
    RadioDay.Enabled=false;
    RadioNight.Enabled=false;
    RadioNight.Visible=false;
    RadioVacation.Enabled=false;
    RadioVacation.Visible=false;
    FilledRectangle.Visible=false;
    TemperatureController.Visible=false;
    TemperatureController.Enabled=false;
    OnOffButtonText.Visible=false;
    Clock.Visible = false;
    Default.Visible = false;
    Default.Enabled=false;

    FanMode.StackingPriority=1;
    FanMode.Visible = true;
    FadeEffectFanMode.Enabled = true;
    FanMode.Enabled=true;
    SimpleTouchHandlerFanMode.Enabled=true;



  }

  $rect <1060,220,1260,260>
  object Effects::Int32Effect FadeEffectFanMode
  {
    preset NoOfCycles = 1;
    preset Outlet = ^FanMode.Opacity;
  }

  $rect <1370,279,1570,319>
  slot SlotGoBackFanMode
  {
    sender;
    TemperatureController.Opacity = 0x00;
    FadeEffectGoBack.Enabled = false;
    RectangleEffect.Enabled=false;

    FanMode.Visible=false;
    FanMode.Enabled=false;
    SimpleTouchHandlerFanMode.Enabled=false;
    Background.Visible=true;
    Overlay.Visible=true;
    ToggleButton.Visible=true;
    ToggleButton.Enabled=true;
    RadioDay.Visible=true;
    RadioDay.Enabled=true;
    RadioNight.Enabled=true;
    RadioNight.Visible=true;
    FilledRectangle.Visible=true;
    RadioVacation.Enabled=true;
    RadioVacation.Visible=true;
    TemperatureController.Visible=true;
    OnOffButtonText.Visible=true;
    RadioPowerOff.Enabled=true;
    RadioPowerOff.Visible=true;
    Clock.Visible =true;
    Default.Visible =true;
    Default.Enabled=true;
    RadioDay.Selected=true;
    Device.SettingNo=0;

    FadeEffectGoBack.Enabled=true;
    RectangleEffect.Enabled=true;
  }

  // Effects
  note group Note
  {
    attr Bounds = <1050,0,1350,320>;
  }

  // Slot Methods
  note group Note1
  {
    attr Bounds = <1350,0,1650,330>;
  }

  $rect <1060,260,1260,300>
  object Effects::ColorEffect RectangleEffect
  {
    preset NoOfCycles = 1;
    preset InitialDelay = 500;
    preset Value2 = #000000FF;
    preset Value1 = #00000000;
    preset Outlet = ^FilledBackground.Color;
  }

  // Directives to adapt the order of the above members according to how these members 
  // where arranged when the project content was stored. In this manner the storage 
  // and the expected order of the members don't depend. Merging of changes in the 
  // project files is simplified.
  $member Bounds
  $member FilledBackground
  $member FanMode
  $member SimpleTouchHandlerFanMode
  $member ExitScreen
  $member DefaultThermostat
  $member GoBackTouchHandler
  $member Background
  $member Overlay
  $member RadioPowerOff
  $member ToggleButton
  $member RadioDay
  $member RadioNight
  $member RadioVacation
  $member Device
  $member TemperatureController
  $member OnOffButtonText
  $member changeBackFinished
  $member FadeEffect
  $member SettingsObserver
  $member onSettingChanged
  $member ExitScreenSlot
  $member SimpleTouchHandler
  $member FadeEffectPowerOff
  $member Clock
  $member Default
  $member DefaultThermSlot
  $member GoBackSlot
  $member Logo
  $member FilledRectangle
  $member FadeEffectManual
  $member FadeEffectGoBack
  $member Fan
  $member FanText
  $member FanTouchHandler
  $member SlotFan
  $member FadeEffectFanMode
  $member SlotGoBackFanMode
  $member Note
  $member Note1
  $member RectangleEffect
}

$rect <770,-10,970,30>
$output false
resource Resources::Bitmap BackgroundDay
{
  attr bitmapfile FileName = .\Res\BackgroundDay.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Native;
  attr bitmapmode Mode = Default;
}

$rect <770,30,970,70>
$output false
resource Resources::Bitmap BackgroundNight
{
  attr bitmapfile FileName = .\Res\BackgroundNight.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Native;
  attr bitmapmode Mode = Default;
}

// Font resources used for the different widgets. If you want to change the fonts \
// within your project, just create a variant of these font resources and define \
// the attributes of the font resources according your design ideas.
$rect <1079,140,1279,180>
$output false
resource Resources::Font FontM
{
  attr fontname FontName = Roboto Light;
  attr fontheight Height = 24;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontheightmode HeightMode = Compatible;
  attr fontrowdistance RowDistance;
}

$rect <770,390,970,430>
$output false
resource Resources::Bitmap BackgroundDefault
{
  attr bitmapfile FileName = .\Res\BackgroundDefault.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Native;
  attr bitmapmode Mode = Default;
}

// Widgets
note group Note1
{
  attr Bounds = <170,110,519,439>;
}

// Screens and Temperature Controller
note group Note4
{
  attr Bounds = <-70,-130,520,110>;
}

// Fonts
note group Note2
{
  attr Bounds = <1030,0,1330,200>;
}

$rect <210,350,450,390>
$output false
autoobject WidgetSet::RadioButtonConfig RadioButtonPowerOff
{
  preset LabelOnColorActive = #FFFFFFFF;
  preset LabelOnColorFocused = #FFFFFFFF;
  preset LabelOnColorDefault = #FFFFFFFF;
  preset LabelOffColorActive = #FFFFFFFF;
  preset LabelOffColorFocused = #FFFFFFFF;
  preset LabelOffColorDefault = #FFFFFFFF;
  preset LabelMarginLeft = 50;
  preset LabelAlignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
  preset LabelOnFont = Thermostat::FontL;
  preset LabelOffFont = Thermostat::FontL;
  preset FaceLayout = Core::Layout[AlignToBottom, AlignToLeft, AlignToTop];
  preset FaceOnFrameActive = 1;
  preset FaceOnFrameFocused = 1;
  preset FaceOnFrameDisabled = 1;
  preset FaceOnFrameDefault = 1;
  preset FaceOnBitmapActive = Thermostat::PowerOffIcon;
  preset FaceOnBitmapFocused = Thermostat::PowerOffIcon;
  preset FaceOnBitmapDisabled = Thermostat::PowerOffIcon;
  preset FaceOnBitmapDefault = Thermostat::PowerOffIcon;
  preset FaceOffTintDefault = #FFFFFFFF;
  preset FaceOffFrameActive = 0;
  preset FaceOffFrameFocused = 0;
  preset FaceOffFrameDisabled = 0;
  preset FaceOffFrameDefault = 0;
  preset FaceOffBitmapActive = Thermostat::PowerOffIcon;
  preset FaceOffBitmapFocused = Thermostat::PowerOffIcon;
  preset FaceOffBitmapDisabled = Thermostat::PowerOffIcon;
  preset FaceOffBitmapDefault = Thermostat::PowerOffIcon;
  preset WidgetMaxSize = <440,44>;
  preset WidgetMinSize = <44,44>;
}

$rect <770,231,970,271>
$output false
resource Resources::Bitmap PowerOffIcon
{
  attr bitmapfile FileName = .\Res\PowerOffIcon.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Native;
  attr bitmapmode Mode = Default;
}

$rect <230,-70,430,-30>
$output false
class ExitScreen : Core::Group
{
  $rect <880,10,1080,50>
  inherited property Bounds = <0,0,800,480>;

  $rect <20,20,160,60>
  object Views::Text Text
  {
    preset Bounds = <285,370,516,481>;
    preset String = "Goodbye!";
    preset Font = Resources::FontExtraLarge;
  }

  $rect <880,59,1080,99>
  object Effects::ColorEffect ColorEffect
  {
    preset OnFinished = null;
    preset InterCycleDelay = 500;
    preset InitialDelay = 500;
    preset Enabled = true;
    preset Value2 = Thermostat::Cold;
    preset Value1 = Thermostat::Hot;
    preset Outlet = ^Text.Color;
  }

  $rect <20,20,160,60>
  object Views::Rectangle Background
  {
    preset Bounds = <0,0,800,480>;
    preset ColorTR = #D7D7D7FF;
    preset ColorTL = #DDDDDDFF;
  }

  $rect <20,20,160,60>
  object Views::Image House
  {
    preset Bounds = <230,99,568,381>;
    preset Bitmap = Thermostat::HouseSplashScreen;
  }

  $rect <20,20,160,60>
  object Views::Image Icon
  {
    preset Bounds = <326,197,472,334>;
    preset Bitmap = Thermostat::HeatSplashScreen;
  }

  // Directives to adapt the order of the above members according to how these members 
  // where arranged when the project content was stored. In this manner the storage 
  // and the expected order of the members don't depend. Merging of changes in the 
  // project files is simplified.
  $member Bounds
  $member Background
  $member Text
  $member ColorEffect
  $member House
  $member Icon
}

$rect <560,271,760,311>
$output false
resource Resources::Bitmap BackgroundVacation
{
  attr bitmapfile FileName = .\Res\BackgroundVacation.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Native;
  attr bitmapmode Mode = Default;
}

$rect <-50,230,150,270>
$output false
const color Vac = #FF8B4FFF;

$rect <770,271,970,311>
$output false
resource Resources::Bitmap HouseSplashScreen
{
  attr bitmapfile FileName = .\Res\HouseSplashScreen.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Native;
  attr bitmapmode Mode = Default;
}

$rect <560,311,760,351>
$output false
resource Resources::Bitmap HeatSplashScreen
{
  attr bitmapfile FileName = .\Res\HeatSplashScreen.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Native;
  attr bitmapmode Mode = Default;
}

$rect <230,-30,430,10>
$output false
class DefaultThermostat : Core::Group
{
  $rect <850,10,1050,50>
  inherited property Bounds = <0,0,800,480>;

  $rect <20,20,160,60>
  object Views::Image BackgroundImage
  {
    preset Bounds = <0,0,800,480>;
    preset Bitmap = Thermostat::BackgroundDay;
  }

  $rect <20,20,160,60>
  object Thermostat::TemperatureController TemperatureController
  {
    preset Bounds = <230,70,570,410>;
    preset OutletNominal = ^Thermostat::Device.NominalTemp;
    preset OutletActual = ^Thermostat::Device.ActualTemp;
  }

  $rect <20,20,160,60>
  object Views::Image GoBackArrow
  {
    preset Bounds = <11,11,78,81>;
    preset Bitmap = Thermostat::GoBackArrow;
  }

  $rect <20,20,160,60>
  object WidgetSet::RadioButton PowerOff
  {
    preset Bounds = <735,16,779,60>;
    preset Label = "";
    preset Appearance = Thermostat::RadioButtonPowerOff;
  }
}

$rect <210,390,450,430>
$output false
autoobject WidgetSet::RadioButtonConfig RadioButtonDefaultConfig
{
  preset LabelOnColorActive = #FFFFFFFF;
  preset LabelOnColorFocused = #FFFFFFFF;
  preset LabelOnColorDefault = Thermostat::Hot;
  preset LabelOffColorActive = #FFFFFFFF;
  preset LabelOffColorFocused = #FFFFFFFF;
  preset LabelOffColorDefault = Thermostat::Hot;
  preset LabelMarginLeft = 50;
  preset LabelAlignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
  preset LabelOnFont = Thermostat::FontL;
  preset LabelOffFont = Thermostat::FontL;
  preset FaceLayout = Core::Layout[AlignToBottom, AlignToLeft, AlignToTop];
  preset FaceOnFrameActive = 1;
  preset FaceOnFrameFocused = 1;
  preset FaceOnFrameDisabled = 1;
  preset FaceOnFrameDefault = 1;
  preset FaceOnBitmapActive = null;
  preset FaceOnBitmapFocused = null;
  preset FaceOnBitmapDisabled = null;
  preset FaceOnBitmapDefault = null;
  preset FaceOffFrameActive = 0;
  preset FaceOffFrameFocused = 0;
  preset FaceOffFrameDisabled = 0;
  preset FaceOffFrameDefault = 0;
  preset FaceOffBitmapActive = null;
  preset FaceOffBitmapFocused = null;
  preset FaceOffBitmapDisabled = null;
  preset FaceOffBitmapDefault = null;
  preset WidgetMaxSize = <440,44>;
  preset WidgetMinSize = <44,44>;
}

$rect <560,351,760,391>
$output false
resource Resources::Bitmap ButtonDefault
{
  attr bitmapfile FileName = .\Res\ButtonDefault.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Native;
  attr bitmapmode Mode = Default;
}

$rect <770,310,970,350>
$output false
resource Resources::Bitmap GoBackArrow
{
  attr bitmapfile FileName = .\Res\GoBackArrow.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Native;
  attr bitmapmode Mode = Default;
}

$rect <-39,10,200,50>
$output false
class Logo : Core::Group
{
  $rect <10,230,210,270>
  inherited property Bounds = <0,0,100,100>;

  $rect <20,20,160,60>
  object Views::Rectangle Background
  {
    preset Bounds = <0,0,100,100>;
    preset Color = #FFFFFF00;
  }

  $rect <20,20,160,60>
  object Views::Image HouseImage
  {
    preset Bounds = <0,0,100,100>;
    preset Color = #FFFFFFFF;
    preset Bitmap = Thermostat::HouseImage;
  }

  $rect <20,20,160,60>
  object Views::Image HeatSymbol
  {
    preset Bounds = <25,30,75,80>;
    preset Bitmap = Thermostat::HeatHandsSymbol;
  }
}

$rect <770,350,970,390>
$output false
resource Resources::Bitmap HouseImage
{
  attr bitmapfile FileName = .\Res\HouseImage.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Native;
  attr bitmapmode Mode = Default;
}

$rect <560,390,760,430>
$output false
resource Resources::Bitmap HeatHandsSymbol
{
  attr bitmapfile FileName = .\Res\HeatHandsSymbol.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Native;
  attr bitmapmode Mode = Default;
}

$rect <769,191,969,231>
$output false
resource Resources::Bitmap VertBar
{
  attr bitmapfile FileName = .\Res\VertBar.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize = <20,220>;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Alpha8;
  attr bitmapmode Mode = Default;
}

$rect <230,10,430,50>
$output false
class FanMode : Core::Group
{
  $rect <899,19,1099,59>
  inherited property Bounds = <0,0,800,480>;

  $rect <20,20,160,60>
  object Views::Image BackgroundImage
  {
    preset Bounds = <0,0,800,480>;
    preset Bitmap = Thermostat::BackgroundDay;
  }

  $rect <20,20,160,60>
  object WidgetSet::VerticalSlider VerticalSlider
  {
    preset Bounds = <359,80,399,400>;
    preset Outlet = ^Thermostat::Device.FanSpeed;
    preset Appearance = Thermostat::VerticalSliderConfig;
  }

  $rect <20,20,160,60>
  object Views::Image FanSmall
  {
    preset Bounds = <298,344,348,394>;
    preset Bitmap = Thermostat::SymbolFanSmall;
  }

  $rect <20,20,160,60>
  object Views::Image FanBig
  {
    preset Bounds = <298,78,348,128>;
    preset Bitmap = Thermostat::SymbolFanBig;
  }

  $rect <20,20,160,60>
  object Views::Image GoBackFanMode
  {
    preset Bounds = <0,6,87,78>;
    preset Bitmap = Thermostat::GoBackArrow;
  }

  $rect <20,20,160,60>
  object Thermostat::Logo Logo
  {
    preset Bounds = <700,380,800,480>;
  }
}

$rect <770,70,970,110>
$output false
resource Resources::Bitmap SymbolFanBig
{
  attr bitmapfile FileName = .\Res\SymbolFanBig.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Native;
  attr bitmapmode Mode = Default;
}

$rect <770,110,970,150>
$output false
resource Resources::Bitmap SymbolFanSmall
{
  attr bitmapfile FileName = .\Res\SymbolFanSmall.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Native;
  attr bitmapmode Mode = Default;
}

// Directives to adapt the order of the above members according to how these members 
// where arranged when the project content was stored. In this manner the storage 
// and the expected order of the members don't depend. Merging of changes in the 
// project files is simplified.
$member GlobalsNote
$member ConstantsNote
$member Note
$member SwingSwitchConfig
$member SwingSwitch
$member ButtonDay
$member ButtonNight
$member ButtonVacation
$member RadioButtonDayConfig
$member RadioButtonNightConfig
$member RadioButtonVacationConfig
$member FontL
$member VertBar
$member VerticalSliderConfig
$member DeviceClass
$member Device
$member Wheels
$member Controller
$member TemperatureController
$member Needle
$member Cold
$member Hot
$member SymbolHeadCool
$member FontXXL
$member Thermostat
$member BackgroundDay
$member BackgroundNight
$member FontM
$member BackgroundDefault
$member Note1
$member Note4
$member Note2
$member RadioButtonPowerOff
$member PowerOffIcon
$member ExitScreen
$member BackgroundVacation
$member Vac
$member HouseSplashScreen
$member HeatSplashScreen
$member DefaultThermostat
$member RadioButtonDefaultConfig
$member ButtonDefault
$member GoBackArrow
$member Logo
$member HouseImage
$member HeatHandsSymbol
$member FanMode
$member SymbolFanBig
$member SymbolFanSmall
